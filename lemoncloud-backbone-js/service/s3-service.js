"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_slicedToArray=function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return function(r,e){var t=[],n=!0,o=!1,i=void 0;try{for(var u,f=r[Symbol.iterator]();!(n=(u=f.next()).done)&&(t.push(u.value),!e||t.length!==e);n=!0);}catch(r){o=!0,i=r}finally{try{!n&&f.return&&f.return()}finally{if(o)throw i}}return t}(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")};module.exports=function(r,e){e=e||"S3";var n=r.U,t=r.aws,o=r._;if(!n)throw new Error("$U is required!");if(!t)throw new Error("$aws is required!");if(!o)throw new Error("$_ is required!");var f=r.log,c=(r.inf,r.err),a=n.NS(e,"magenta"),i={do_upload:function(r,e,t,n,o){if(!r)return Promise.reject(new Error("bucket is required!"));if(!e)return Promise.reject(new Error("filename is required!"));if(!t)return Promise.reject(new Error("filestream is required!"));var i={Bucket:r=y(r),Key:e,Body:t},u={};n&&(i.ContentType=n);o&&"object"==(void 0===o?"undefined":_typeof(o))&&(u.tags=Object.keys(o).reduce(function(r,e){var t=o[e];return r.push({Key:e,Value:""+t}),r},[]));return new Promise(function(t,n){s.upload(i,u,function(r,e){if(r)return n(r);t(e)})}).then(function(r){return f(a,"data.key:",r&&r.Key||"#NOP"),r}).catch(function(r){throw c(a,"ERR! err=",r),r})},do_get_object:function(r,e){if(!r)return Promise.reject(new Error("bucket is required!"));if(!e)return Promise.reject(new Error("filename is required!"));var o={Bucket:r=y(r),Key:e};return new Promise(function(t,n){s.getObject(o,function(r,e){if(r)return n(r);t(e)})}).catch(function(r){throw c(a,"ERR! err=",r),r})}};r(e,i);var u={region:n.env("S3_REGION",new Error(a+":S3_REGION is required!"))};f(a,"config=",u);var s=new t.S3(u),y=function(r){var e=n.env("S3_CONFIG",new Error(a+":S3_CONFIG is required!"));if(e instanceof Error)throw e;var t=e.split(",").map(function(r){return r.trim()}).reduce(function(r,e){var t=e.split("=",2).map(function(r){return r.trim()}),n=_slicedToArray(t,2),o=n[0],i=n[1];return r[o]=i,r},{});if(null==t[r])throw new Error("404 NOT FOUND - id:"+r);return t[r]};return i};